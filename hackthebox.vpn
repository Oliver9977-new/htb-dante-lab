#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, re, urllib.parse, json
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

TIMEOUT = 6
UA = {"User-Agent":"Mozilla/5.0 (GitLabVersionProbe)"}

VER_PATTS = [
    re.compile(r'GitLab(?:\s+(Community|Enterprise)\s+Edition)?\s*v?(\d+\.\d+\.\d+)'),
    re.compile(r'gitlab\s*v?(\d+\.\d+\.\d+)(?:-ee|-ce)?', re.I),
    re.compile(r'GitLab\s*v?(\d+\.\d+\.\d+)(?:\s*\((?:ee|ce)\))?', re.I),
]

def norm_base(u):
    if not u.startswith("http"):
        u = "http://" + u
    return u.rstrip("/")

def try_api(base):
    url = base + "/api/v4/version"
    try:
        r = requests.get(url, headers=UA, timeout=TIMEOUT, verify=False)
        if r.ok and r.headers.get("Content-Type","").startswith(("application/json","application/vnd.gitlab")):
            data = r.json()
            ver = data.get("version")
            rev = data.get("revision")
            return {"source":"api/v4/version", "version":ver, "extra":{"revision":rev}}
    except Exception: pass
    return None

def search_text_for_version(text):
    for p in VER_PATTS:
        m = p.search(text)
        if m:
            if len(m.groups())==2 and m.group(1):
                return m.group(1).strip()+" Edition " + m.group(2)
            return m.group(0).replace("  "," ").strip()
    # 常见注释形式：// GitLab v14.3.2-ee
    m = re.search(r'GitLab\s+v?(\d+\.\d+\.\d+)(-ee|-ce)?', text, re.I)
    if m:
        return f"GitLab {m.group(1)}{m.group(2) or ''}".strip()
    # 有些页面里有 window.gon/gitlab_version
    m = re.search(r'(gitlab_version|version)\s*[:=]\s*["\'](\d+\.\d+\.\d+)["\']', text, re.I)
    if m:
        return f"GitLab {m.group(2)}"
    return None

def try_help(base):
    url = base + "/help"
    try:
        r = requests.get(url, headers=UA, timeout=TIMEOUT, verify=False)
        if r.ok:
            ver = search_text_for_version(r.text)
            if ver:
                return {"source":"/help", "version":ver}
    except Exception: pass
    return None

def try_signin_html(base):
    url = base + "/users/sign_in"
    try:
        r = requests.get(url, headers=UA, timeout=TIMEOUT, verify=False)
        if r.ok:
            # 先从 HTML 直接扒
            ver = search_text_for_version(r.text)
            if ver:
                return {"source":"/users/sign_in(html)", "version":ver}
            # 再去抓静态资源里的注释
            # 粗暴提取 <script src="..."> 和 <link href="...">
            assets = set()
            for m in re.finditer(r'(?:src|href)\s*=\s*["\']([^"\']+)["\']', r.text, re.I):
                src = m.group(1)
                if any(x in src for x in ("application", "webpack", ".js", ".css", "runtime")):
                    assets.add(urllib.parse.urljoin(url, src))
            for a in list(assets)[:8]:  # 不用太多，取前几个高概率命中
                try:
                    ra = requests.get(a, headers=UA, timeout=TIMEOUT, verify=False)
                    if ra.ok and ra.text:
                        v2 = search_text_for_version(ra.text[:5000])  # 看前几千字节足够
                        if v2:
                            return {"source":a, "version":v2}
                except Exception:
                    continue
    except Exception: pass
    return None

def try_headers(base):
    try:
        r = requests.get(base, headers=UA, timeout=TIMEOUT, verify=False)
        if r.ok:
            # 极少数情况下会有 gitlab-version 自定义头
            for k,v in r.headers.items():
                if "gitlab" in k.lower() and re.search(r'\d+\.\d+\.\d+', v):
                    return {"source":"http headers", "version":v.strip()}
    except Exception: pass
    return None

def main():
    if len(sys.argv)<2:
        print("用法: python3 gitlab_ver_probe.py http://10.11.1.148")
        sys.exit(1)
    base = norm_base(sys.argv[1])
    checks = [try_api, try_help, try_signin_html, try_headers]
    results = []
    for f in checks:
        r = f(base)
        if r:
            results.append(r)
            break
    if results:
        hit = results[0]
        print(json.dumps({"target":base, **hit}, ensure_ascii=False, indent=2))
    else:
        print(json.dumps({"target":base, "error":"没直接抓到版本。可能页面做了定制或登录后可见。"}, ensure_ascii=False, indent=2))
        print("小贴士：试试加端口、https、或用 Burp 抓包看 JS 注释。")

if __name__ == "__main__":
    main()
